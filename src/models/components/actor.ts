/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Type = {
    None: "none",
    User: "user",
    SystemIcon: "system_icon",
    SystemCustom: "system_custom",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type Actor = {
    data: string | null;
    type: Type;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace Actor$ {
    export const inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> = z.object({
        data: z.nullable(z.string()),
        type: Type$.inboundSchema,
    });

    export type Outbound = {
        data: string | null;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Actor> = z.object({
        data: z.nullable(z.string()),
        type: Type$.outboundSchema,
    });
}

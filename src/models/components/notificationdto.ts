/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { Actor, Actor$ } from "./actor.js";
import { MessageCTA, MessageCTA$ } from "./messagecta.js";
import { SubscriberResponseDto, SubscriberResponseDto$ } from "./subscriberresponsedto.js";
import * as z from "zod";

export const NotificationDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type NotificationDtoChannel = ClosedEnum<typeof NotificationDtoChannel>;

/**
 * Provider specific overrides used when triggering the notification
 */
export type NotificationDtoOverrides = {};

/**
 * The payload that was used to send the notification trigger
 */
export type NotificationDtoPayload = {};

export const NotificationDtoStatus = {
    Sent: "sent",
    Error: "error",
    Warning: "warning",
} as const;
export type NotificationDtoStatus = ClosedEnum<typeof NotificationDtoStatus>;

export type NotificationDto = {
    environmentId: string;
    feedId: string;
    id?: string | undefined;
    jobId: string;
    messageTemplateId: string;
    notificationId: string;
    organizationId: string;
    subscriberId: string;
    templateId: string;
    actor?: Actor | undefined;
    channel: NotificationDtoChannel;
    content: string;
    createdAt?: string | undefined;
    cta: MessageCTA;
    deleted: boolean;
    deviceTokens?: Array<string> | undefined;
    expireAt?: string | undefined;
    /**
     * Provider specific overrides used when triggering the notification
     */
    overrides: NotificationDtoOverrides;
    /**
     * The payload that was used to send the notification trigger
     */
    payload: NotificationDtoPayload;
    providerId?: string | undefined;
    read: boolean;
    seen: boolean;
    status: NotificationDtoStatus;
    subject?: string | undefined;
    subscriber?: SubscriberResponseDto | undefined;
    templateIdentifier?: string | undefined;
    transactionId: string;
    updatedAt?: string | undefined;
};

/** @internal */
export namespace NotificationDtoChannel$ {
    export const inboundSchema: z.ZodNativeEnum<typeof NotificationDtoChannel> =
        z.nativeEnum(NotificationDtoChannel);
    export const outboundSchema: z.ZodNativeEnum<typeof NotificationDtoChannel> = inboundSchema;
}

/** @internal */
export namespace NotificationDtoOverrides$ {
    export const inboundSchema: z.ZodType<NotificationDtoOverrides, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationDtoOverrides> =
        z.object({});
}

/** @internal */
export namespace NotificationDtoPayload$ {
    export const inboundSchema: z.ZodType<NotificationDtoPayload, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationDtoPayload> =
        z.object({});
}

/** @internal */
export namespace NotificationDtoStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof NotificationDtoStatus> =
        z.nativeEnum(NotificationDtoStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof NotificationDtoStatus> = inboundSchema;
}

/** @internal */
export namespace NotificationDto$ {
    export const inboundSchema: z.ZodType<NotificationDto, z.ZodTypeDef, unknown> = z
        .object({
            _environmentId: z.string(),
            _feedId: z.string(),
            _id: z.string().optional(),
            _jobId: z.string(),
            _messageTemplateId: z.string(),
            _notificationId: z.string(),
            _organizationId: z.string(),
            _subscriberId: z.string(),
            _templateId: z.string(),
            actor: Actor$.inboundSchema.optional(),
            channel: NotificationDtoChannel$.inboundSchema,
            content: z.string(),
            createdAt: z.string().optional(),
            cta: MessageCTA$.inboundSchema,
            deleted: z.boolean(),
            deviceTokens: z.array(z.string()).optional(),
            expireAt: z.string().optional(),
            overrides: z.lazy(() => NotificationDtoOverrides$.inboundSchema),
            payload: z.lazy(() => NotificationDtoPayload$.inboundSchema),
            providerId: z.string().optional(),
            read: z.boolean(),
            seen: z.boolean(),
            status: NotificationDtoStatus$.inboundSchema,
            subject: z.string().optional(),
            subscriber: SubscriberResponseDto$.inboundSchema.optional(),
            templateIdentifier: z.string().optional(),
            transactionId: z.string(),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _environmentId: "environmentId",
                _feedId: "feedId",
                _id: "id",
                _jobId: "jobId",
                _messageTemplateId: "messageTemplateId",
                _notificationId: "notificationId",
                _organizationId: "organizationId",
                _subscriberId: "subscriberId",
                _templateId: "templateId",
            });
        });

    export type Outbound = {
        _environmentId: string;
        _feedId: string;
        _id?: string | undefined;
        _jobId: string;
        _messageTemplateId: string;
        _notificationId: string;
        _organizationId: string;
        _subscriberId: string;
        _templateId: string;
        actor?: Actor$.Outbound | undefined;
        channel: string;
        content: string;
        createdAt?: string | undefined;
        cta: MessageCTA$.Outbound;
        deleted: boolean;
        deviceTokens?: Array<string> | undefined;
        expireAt?: string | undefined;
        overrides: NotificationDtoOverrides$.Outbound;
        payload: NotificationDtoPayload$.Outbound;
        providerId?: string | undefined;
        read: boolean;
        seen: boolean;
        status: string;
        subject?: string | undefined;
        subscriber?: SubscriberResponseDto$.Outbound | undefined;
        templateIdentifier?: string | undefined;
        transactionId: string;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationDto> = z
        .object({
            environmentId: z.string(),
            feedId: z.string(),
            id: z.string().optional(),
            jobId: z.string(),
            messageTemplateId: z.string(),
            notificationId: z.string(),
            organizationId: z.string(),
            subscriberId: z.string(),
            templateId: z.string(),
            actor: Actor$.outboundSchema.optional(),
            channel: NotificationDtoChannel$.outboundSchema,
            content: z.string(),
            createdAt: z.string().optional(),
            cta: MessageCTA$.outboundSchema,
            deleted: z.boolean(),
            deviceTokens: z.array(z.string()).optional(),
            expireAt: z.string().optional(),
            overrides: z.lazy(() => NotificationDtoOverrides$.outboundSchema),
            payload: z.lazy(() => NotificationDtoPayload$.outboundSchema),
            providerId: z.string().optional(),
            read: z.boolean(),
            seen: z.boolean(),
            status: NotificationDtoStatus$.outboundSchema,
            subject: z.string().optional(),
            subscriber: SubscriberResponseDto$.outboundSchema.optional(),
            templateIdentifier: z.string().optional(),
            transactionId: z.string(),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                environmentId: "_environmentId",
                feedId: "_feedId",
                id: "_id",
                jobId: "_jobId",
                messageTemplateId: "_messageTemplateId",
                notificationId: "_notificationId",
                organizationId: "_organizationId",
                subscriberId: "_subscriberId",
                templateId: "_templateId",
            });
        });
}
